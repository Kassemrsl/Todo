@page "/"
@page "/tasks"
@using Microsoft.AspNetCore.Authorization
@using Todo.OnlineTaskManagement.BlazorApp.Application.Gateways
@using Todo.OnlineTaskManagement.Shared.Responses
@inject ITasksGateway TasksGateway
@inject NavigationManager NavigationManager

<div class="container my-4">
    <!-- Task table -->
    <table class="table table-hover table-sm">
        <thead>
            <tr>
                <th @onclick="() => SortBy(nameof(TaskResponse.Title))" role="button">
                    Title @SortIcon(nameof(TaskResponse.Title))
                </th>
                <th @onclick="() => SortBy(nameof(TaskResponse.Description))" role="button">
                    Description @SortIcon(nameof(TaskResponse.Description))
                </th>
                <th @onclick="() => SortBy(nameof(TaskResponse.Category))" role="button">
                    Category @SortIcon(nameof(TaskResponse.Category))
                </th>
                <th @onclick="() => SortBy(nameof(TaskResponse.TaskStatus))" role="button">
                    Status @SortIcon(nameof(TaskResponse.TaskStatus))
                </th>
                <th @onclick="() => SortBy(nameof(TaskResponse.DueDate))" role="button">
                    Due @SortIcon(nameof(TaskResponse.DueDate))
                </th>
                <th @onclick="() => SortBy(nameof(TaskResponse.TaskPriority))" role="button">
                    Priority @SortIcon(nameof(TaskResponse.TaskPriority))
                </th>
            </tr>
        </thead>
        <tbody>
            @if (_rows is null)
            {
                <tr><td colspan="3" class="text-center py-3">Loading…</td></tr>
            }
            else if (_rows.Count == 0)
            {
                <tr><td colspan="3" class="text-center py-3">No tasks</td></tr>
            }
            else
            {
                @foreach (var row in _rows)
                {
                    <tr>
                        <td>@row.Title</td>
                        <td>@row.Description</td>
                        <td>@row.Category</td>
                        <td>@row.TaskStatus</td>
                        <td>@row.DueDate.Value.ToShortDateString()</td>
                        <td>@row.TaskPriority</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditItem(row.TaskId)">Edit</button>
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteItem(row.TaskId)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>

    </table>

    <!-- Pager -->
    <nav>
        <ul class="pagination pagination-sm">
            <li class="page-item @( _page == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(_page - 1)">Prev</button>
            </li>
            <li class="page-item">
                <span class="page-link">@_page</span>
            </li>
            <li class="page-item @(_hasMore ? "" : "disabled")">
                <button class="page-link" @onclick="() => ChangePage(_page + 1)">Next</button>
            </li>
        </ul>
    </nav>
</div>

@code {
    private string? _search;
    private List<TaskResponse>? _rows;
    private int _page = 1;
    private bool _hasMore;
    private string _sort = nameof(TaskResponse.DueDate);
    private bool _asc = true;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        _rows = await TasksGateway.GetTasksAsync();
    }

    private void EditItem(int taskId)
    {
        NavigationManager.NavigateTo($"/tasks/editor/{taskId}");
    }

    private async Task DeleteItem(int taskId)
    {
        await TasksGateway.DeleteTaskAsync(taskId);

        StateHasChanged();

        await LoadAsync();
    }

    private void SortBy(string key)
    {
        if (_sort == key) _asc = !_asc; else (_sort, _asc) = (key, true);
        _page = 1;
        _ = LoadAsync();
    }

    private Task ChangePage(int p) { _page = p; return LoadAsync(); }

    private MarkupString SortIcon(string key) =>
        (key == _sort)
            ? (MarkupString)$"<small>{(_asc ? "▲" : "▼")}</small>"
            : (MarkupString)"";
}
